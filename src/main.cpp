#include <Arduino.h>
#include <ArduinoOTA.h>
#include <ESPAsyncWebServer.h>
#include <PubSubClient.h>
#include <WiFi.h>

#include <IRremote.h>

#include "secrets.h"

AsyncWebServer server(80);

IRsend irsend;
WiFiClient espClient;
PubSubClient client(espClient);
long lastReconnectAttempt = 0;

unsigned int shizuka[643] = { 417, 462, 512, 355, 404, 463, 424, 442, 404, 464, 425, 25125, 3560, 1656, 424, 1309, 405, 462, 426, 441, 426, 441, 425, 1307, 405, 463, 425, 442, 403, 464, 424, 441, 428, 1306, 424, 443, 505, 1227, 425, 1309, 427, 441, 460, 1272, 405, 1329, 458, 1275, 460, 1273, 425, 1309, 425, 442, 427, 439, 404, 1329, 506, 361, 405, 462, 426, 441, 426, 440, 405, 462, 426, 441, 426, 440, 427, 440, 405, 462, 425, 442, 424, 442, 425, 1308, 405, 462, 404, 464, 403, 464, 422, 444, 425, 441, 405, 462, 426, 440, 405, 463, 424, 1309, 404, 1329, 404, 463, 425, 441, 460, 1273, 404, 463, 405, 1328, 427, 440, 507, 1226, 462, 405, 405, 462, 426, 441, 427, 1306, 426, 440, 507, 361, 506, 360, 426, 441, 423, 444, 426, 440, 405, 462, 426, 441, 404, 462, 404, 464, 422, 443, 427, 440, 426, 442, 403, 462, 405, 1312, 421, 463, 426, 440, 427, 1307, 404, 1330, 458, 408, 404, 462, 424, 443, 424, 443, 404, 462, 405, 462, 405, 463, 403, 463, 425, 441, 512, 355, 404, 463, 460, 407, 404, 462, 426, 441, 404, 462, 461, 407, 404, 462, 404, 462, 424, 444, 460, 406, 424, 442, 405, 462, 512, 1221, 405, 462, 511, 356, 404, 463, 424, 443, 509, 358, 425, 1307, 427, 439, 405, 1329, 461, 407, 403, 1329, 404, 463, 404, 463, 404, 463, 404, 462, 405, 462, 404, 463, 426, 441, 404, 462, 404, 463, 425, 1308, 404, 462, 426, 442, 426, 440, 405, 461, 405, 463, 404, 1329, 426, 440, 426, 441, 404, 1329, 512, 355, 426, 441, 426, 442, 422, 1310, 404, 463, 507, 359, 426, 441, 425, 443, 403, 462, 424, 443, 405, 462, 404, 463, 404, 462, 405, 462, 404, 463, 404, 462, 404, 463, 404, 462, 405, 463, 425, 441, 425, 441, 406, 462, 425, 442, 403, 462, 406, 461, 405, 462, 404, 463, 404, 463, 510, 1223, 425, 442, 510, 357, 404, 462, 426, 1307, 404, 464, 425, 35523, 3478, 1740, 462, 1271, 405, 463, 405, 461, 425, 442, 426, 1307, 405, 463, 404, 462, 513, 353, 427, 441, 425, 1307, 426, 441, 507, 1226, 427, 1306, 512, 355, 427, 1308, 459, 1273, 427, 1307, 404, 1329, 427, 1307, 425, 441, 405, 463, 403, 1329, 427, 440, 404, 464, 425, 441, 510, 356, 506, 360, 425, 442, 426, 441, 426, 441, 461, 405, 426, 442, 404, 462, 426, 441, 426, 440, 404, 463, 426, 440, 426, 441, 404, 463, 425, 441, 426, 1308, 426, 442, 425, 441, 422, 1310, 427, 1307, 423, 1310, 405, 461, 405, 463, 404, 1328, 427, 441, 426, 1307, 426, 441, 427, 1306, 426, 1308, 427, 439, 404, 463, 506, 361, 425, 441, 427, 441, 424, 442, 404, 462, 409, 458, 426, 441, 425, 441, 426, 441, 424, 444, 403, 462, 427, 441, 511, 1221, 427, 1307, 426, 443, 402, 1329, 424, 443, 426, 440, 427, 440, 424, 444, 425, 440, 461, 407, 512, 354, 404, 463, 423, 444, 425, 441, 404, 462, 511, 356, 427, 442, 402, 463, 426, 440, 424, 443, 426, 440, 427, 1306, 427, 1307, 404, 464, 422, 444, 427, 440, 404, 462, 404, 463, 507, 359, 405, 464, 402, 463, 426, 440, 423, 444, 408, 1325, 405, 1329, 426, 441, 426, 441, 427, 439, 425, 441, 427, 441, 424, 443, 403, 464, 425, 442, 458, 407, 427, 441, 425, 441, 427, 439, 462, 405, 423, 444, 404, 463, 424, 441, 427, 440, 405, 1329, 460, 1274, 426, 440, 405, 463, 423, 443, 404, 463, 403, 1330, 425, 1308, 404, 462, 427, 440, 425, 442, 509, 358, 426, 441, 424, 442, 404, 462, 424, 444, 460, 407, 425, 442, 425, 441, 404, 462, 424, 443, 424, 443, 459, 407, 404, 463, 506, 1227, 513, 354, 404, 463, 423, 1310, 404, 1330, 404, 462, 404, 1329, 427, 440, 404 };
unsigned int fullSpeed[643] = { 515, 362, 507, 360, 426, 442, 426, 440, 426, 441, 404, 25159, 3458, 1763, 508, 1227, 404, 463, 426, 441, 405, 462, 425, 1310, 427, 441, 425, 441, 404, 463, 404, 464, 424, 1309, 405, 463, 403, 1331, 404, 1331, 403, 464, 423, 1312, 403, 1330, 426, 1309, 404, 1330, 404, 1329, 405, 464, 404, 462, 508, 1227, 507, 359, 428, 441, 403, 464, 425, 441, 405, 463, 424, 443, 426, 442, 426, 441, 403, 464, 403, 464, 404, 462, 425, 1311, 425, 441, 404, 464, 423, 444, 505, 362, 404, 463, 404, 466, 425, 1306, 405, 1330, 426, 1308, 423, 445, 403, 1331, 403, 464, 404, 464, 427, 439, 405, 1330, 425, 442, 426, 1307, 405, 463, 426, 442, 403, 463, 405, 1330, 423, 443, 507, 361, 425, 443, 427, 440, 426, 441, 403, 464, 404, 463, 404, 464, 422, 445, 403, 464, 424, 442, 512, 356, 426, 441, 404, 463, 404, 1330, 404, 464, 506, 361, 423, 1312, 422, 1311, 405, 1330, 404, 463, 404, 463, 427, 441, 403, 464, 404, 463, 403, 465, 424, 442, 426, 441, 404, 464, 426, 441, 403, 463, 404, 464, 404, 463, 404, 464, 403, 464, 404, 463, 404, 463, 426, 441, 404, 463, 405, 463, 426, 440, 427, 1308, 403, 464, 403, 464, 428, 439, 425, 1309, 425, 1310, 425, 1309, 404, 1331, 403, 1331, 426, 1308, 404, 1331, 403, 1331, 427, 1307, 404, 464, 404, 463, 403, 464, 404, 463, 426, 441, 423, 445, 425, 442, 404, 1330, 403, 465, 425, 441, 404, 463, 404, 464, 426, 440, 404, 1331, 403, 464, 506, 361, 423, 1311, 404, 463, 405, 463, 404, 464, 403, 1330, 404, 464, 427, 440, 424, 443, 404, 463, 424, 443, 404, 464, 424, 443, 404, 463, 426, 441, 404, 463, 404, 463, 427, 440, 404, 463, 404, 464, 426, 441, 425, 442, 404, 463, 425, 443, 403, 464, 424, 444, 403, 464, 402, 464, 404, 1330, 424, 444, 403, 1331, 426, 1309, 507, 1227, 423, 444, 423, 1311, 403, 1332, 425, 35543, 3480, 1742, 511, 1223, 404, 464, 403, 464, 403, 464, 404, 1330, 425, 442, 404, 464, 403, 464, 424, 442, 405, 1330, 403, 464, 404, 1330, 426, 1309, 404, 463, 404, 1330, 404, 1331, 424, 1310, 425, 1309, 427, 1309, 402, 464, 425, 442, 404, 1331, 403, 465, 402, 464, 427, 440, 403, 464, 403, 464, 424, 444, 403, 464, 403, 464, 425, 442, 404, 463, 404, 464, 403, 463, 426, 442, 506, 361, 403, 464, 403, 464, 424, 443, 426, 441, 404, 1331, 403, 464, 403, 465, 425, 1308, 404, 1331, 403, 1332, 403, 464, 403, 463, 404, 464, 403, 464, 404, 1329, 404, 464, 404, 1331, 403, 1330, 405, 464, 403, 463, 404, 464, 404, 463, 403, 464, 403, 464, 423, 444, 403, 464, 404, 464, 423, 444, 403, 464, 403, 463, 506, 362, 426, 441, 426, 1309, 403, 1331, 506, 1229, 423, 443, 404, 464, 403, 464, 404, 463, 404, 463, 404, 463, 404, 463, 404, 463, 504, 364, 423, 445, 402, 464, 404, 463, 426, 441, 426, 441, 404, 464, 422, 445, 403, 465, 424, 443, 506, 1227, 427, 1308, 403, 464, 404, 464, 403, 464, 426, 441, 427, 440, 403, 464, 403, 465, 402, 464, 404, 463, 404, 464, 425, 1309, 404, 1331, 422, 444, 404, 464, 427, 440, 506, 361, 506, 361, 403, 464, 403, 464, 403, 465, 403, 465, 402, 464, 426, 442, 403, 463, 403, 464, 404, 464, 413, 454, 426, 442, 402, 464, 403, 1331, 424, 1311, 403, 464, 403, 465, 403, 463, 404, 463, 403, 1332, 403, 1332, 507, 359, 404, 464, 403, 464, 427, 441, 505, 361, 404, 463, 404, 463, 426, 442, 424, 444, 505, 361, 403, 465, 403, 463, 426, 441, 403, 465, 426, 441, 425, 442, 403, 464, 403, 465, 426, 441, 402, 1332, 423, 1311, 403, 464, 403, 464, 425, 443, 402 };
unsigned int powerOff[643] = { 457, 435, 433, 434, 432, 435, 432, 436, 432, 435, 432, 25123, 3493, 1735, 433, 1301, 433, 435, 433, 434, 434, 434, 432, 1301, 434, 434, 433, 434, 433, 434, 432, 435, 433, 1302, 456, 411, 432, 1302, 433, 1301, 433, 434, 433, 1301, 434, 1301, 433, 1301, 434, 1300, 434, 1301, 433, 433, 434, 435, 433, 1301, 484, 383, 433, 434, 434, 433, 433, 433, 434, 435, 433, 434, 433, 433, 434, 434, 434, 434, 432, 435, 433, 434, 433, 1300, 434, 435, 432, 434, 433, 434, 434, 433, 434, 433, 485, 361, 455, 433, 485, 1251, 433, 1300, 434, 1301, 456, 1278, 433, 433, 435, 433, 433, 1301, 434, 433, 435, 432, 435, 1300, 434, 434, 433, 433, 434, 433, 435, 1299, 434, 1301, 434, 433, 434, 434, 433, 434, 433, 434, 434, 433, 434, 434, 433, 433, 434, 433, 434, 433, 434, 434, 433, 435, 433, 433, 434, 433, 434, 1300, 434, 434, 433, 434, 433, 434, 434, 1301, 433, 435, 431, 434, 434, 435, 432, 434, 434, 433, 434, 433, 434, 433, 434, 434, 433, 434, 434, 433, 433, 434, 433, 434, 433, 434, 434, 433, 434, 434, 433, 434, 433, 434, 433, 434, 434, 433, 434, 434, 433, 433, 434, 434, 434, 1301, 432, 434, 433, 413, 455, 433, 434, 1301, 433, 1301, 434, 1300, 434, 1303, 431, 1302, 432, 1302, 433, 1301, 433, 1301, 434, 1301, 433, 434, 432, 436, 432, 434, 433, 434, 434, 433, 433, 435, 432, 435, 432, 1302, 433, 435, 432, 434, 433, 435, 433, 434, 433, 434, 433, 1280, 453, 436, 432, 435, 432, 1302, 432, 434, 434, 434, 433, 434, 433, 1302, 433, 434, 432, 436, 432, 434, 433, 434, 433, 435, 432, 435, 432, 436, 431, 435, 432, 434, 433, 436, 432, 434, 433, 435, 432, 435, 432, 435, 432, 436, 431, 435, 433, 434, 433, 435, 431, 435, 432, 436, 432, 435, 432, 436, 431, 436, 430, 1302, 434, 1302, 432, 1301, 433, 1303, 431, 436, 432, 1302, 432, 1302, 434, 35531, 3489, 1736, 432, 1302, 434, 434, 431, 435, 433, 434, 433, 1302, 432, 435, 432, 436, 433, 434, 431, 436, 431, 1303, 432, 435, 432, 1303, 432, 1302, 433, 434, 432, 1302, 432, 1303, 431, 1303, 432, 1302, 432, 1303, 431, 436, 431, 435, 433, 1303, 432, 434, 432, 436, 431, 436, 432, 434, 433, 434, 433, 435, 432, 435, 433, 435, 431, 436, 432, 435, 433, 434, 432, 434, 433, 435, 431, 437, 431, 436, 431, 436, 430, 437, 431, 435, 432, 436, 432, 435, 433, 435, 432, 1302, 432, 1302, 432, 1302, 432, 436, 432, 435, 432, 435, 432, 434, 433, 1302, 432, 436, 432, 1302, 432, 1302, 433, 435, 431, 436, 431, 436, 432, 434, 433, 436, 432, 434, 432, 436, 431, 435, 432, 435, 433, 433, 433, 436, 432, 434, 433, 435, 433, 433, 433, 1302, 433, 1301, 432, 436, 433, 1301, 433, 434, 434, 433, 433, 434, 433, 436, 432, 434, 432, 436, 432, 435, 432, 434, 433, 435, 433, 434, 433, 433, 434, 435, 432, 435, 432, 435, 431, 436, 432, 434, 433, 436, 431, 1301, 434, 1301, 434, 434, 433, 434, 433, 435, 432, 434, 433, 435, 432, 434, 433, 435, 432, 434, 433, 435, 433, 435, 433, 1301, 432, 1302, 433, 433, 433, 435, 433, 434, 433, 434, 433, 434, 433, 434, 434, 434, 433, 435, 432, 434, 433, 435, 432, 434, 433, 435, 432, 434, 434, 434, 433, 434, 433, 434, 433, 435, 432, 1302, 433, 1300, 434, 434, 433, 434, 434, 433, 434, 433, 437, 1298, 433, 1301, 433, 434, 433, 435, 433, 433, 434, 434, 433, 434, 433, 435, 432, 435, 433, 433, 434, 434, 433, 434, 433, 435, 432, 435, 432, 434, 433, 435, 432, 434, 434, 433, 434, 1301, 434, 1301, 433, 1301, 433, 434, 433, 1301, 433, 434, 434, 1300, 435, 432, 434 };
unsigned int shizukaHot[643] = { 460, 432, 436, 432, 436, 432, 436, 432, 432, 436, 432, 25128, 3544, 1684, 460, 1272, 464, 404, 488, 380, 464, 404, 460, 1272, 464, 404, 464, 404, 460, 408, 460, 408, 460, 1272, 464, 404, 464, 1272, 460, 1272, 464, 404, 464, 1272, 460, 1272, 464, 1272, 464, 1272, 460, 1272, 464, 404, 464, 404, 460, 1276, 460, 404, 464, 404, 488, 380, 488, 380, 464, 404, 460, 408, 460, 404, 464, 404, 492, 376, 436, 432, 460, 408, 460, 1272, 464, 404, 464, 404, 464, 404, 488, 380, 464, 404, 460, 404, 464, 1272, 460, 1276, 460, 404, 488, 1248, 464, 1272, 464, 404, 460, 1272, 464, 404, 492, 376, 460, 408, 460, 1272, 488, 380, 464, 404, 464, 404, 460, 1272, 464, 404, 464, 404, 460, 408, 460, 408, 460, 404, 464, 404, 464, 404, 464, 404, 460, 408, 460, 408, 460, 404, 464, 404, 468, 400, 464, 404, 460, 1276, 464, 400, 464, 404, 464, 1272, 464, 404, 460, 404, 464, 404, 464, 404, 488, 380, 464, 404, 464, 404, 460, 404, 492, 376, 464, 404, 460, 408, 460, 408, 460, 404, 492, 376, 464, 404, 488, 380, 464, 404, 460, 408, 460, 404, 464, 404, 464, 404, 464, 404, 460, 408, 460, 1272, 464, 404, 464, 404, 464, 404, 460, 1276, 460, 1272, 464, 1272, 460, 1272, 464, 1272, 460, 1276, 460, 1272, 464, 1272, 464, 1272, 460, 404, 464, 404, 464, 404, 488, 380, 460, 408, 460, 408, 460, 404, 464, 1272, 464, 404, 488, 380, 460, 408, 460, 404, 464, 404, 464, 1272, 460, 404, 464, 408, 460, 1272, 464, 404, 460, 408, 464, 404, 460, 1272, 488, 380, 460, 408, 460, 408, 484, 380, 464, 404, 464, 404, 464, 404, 488, 380, 484, 384, 460, 404, 464, 404, 464, 404, 464, 404, 464, 404, 488, 376, 464, 404, 464, 404, 464, 404, 464, 404, 464, 380, 488, 400, 464, 404, 488, 380, 464, 1272, 460, 404, 464, 1272, 464, 1272, 460, 408, 460, 404, 464, 404, 464, 35504, 3496, 1732, 436, 1300, 436, 432, 436, 432, 436, 432, 432, 1300, 436, 432, 436, 432, 432, 436, 432, 432, 436, 1300, 436, 432, 436, 1300, 432, 1300, 436, 432, 436, 1300, 432, 1300, 436, 1300, 436, 1300, 432, 1300, 436, 432, 436, 412, 456, 1296, 436, 432, 436, 432, 436, 432, 436, 432, 436, 432, 432, 432, 436, 432, 436, 432, 436, 432, 436, 432, 460, 408, 432, 432, 436, 432, 436, 432, 436, 432, 436, 432, 432, 432, 436, 432, 436, 1300, 436, 432, 436, 432, 432, 1300, 436, 432, 436, 432, 436, 1296, 436, 432, 436, 432, 436, 1300, 436, 428, 440, 428, 436, 1300, 436, 1300, 432, 436, 432, 432, 436, 432, 436, 432, 436, 432, 432, 436, 432, 432, 436, 432, 436, 432, 436, 432, 436, 432, 436, 432, 432, 432, 436, 432, 436, 1300, 436, 1296, 436, 432, 464, 1272, 436, 432, 436, 428, 436, 436, 432, 432, 436, 432, 436, 432, 436, 432, 432, 436, 432, 432, 464, 404, 436, 432, 464, 404, 436, 432, 432, 436, 432, 432, 436, 432, 436, 432, 436, 1296, 436, 1300, 436, 432, 436, 432, 436, 432, 432, 436, 432, 432, 436, 432, 436, 432, 436, 432, 436, 432, 432, 432, 436, 1300, 436, 1300, 432, 436, 432, 432, 436, 432, 436, 432, 436, 432, 436, 432, 432, 432, 436, 432, 436, 432, 436, 432, 436, 432, 432, 436, 432, 432, 436, 432, 460, 408, 436, 432, 436, 432, 432, 1300, 436, 1300, 436, 432, 436, 432, 432, 432, 436, 432, 436, 1300, 436, 1296, 436, 432, 436, 432, 436, 432, 436, 432, 436, 432, 432, 432, 436, 432, 436, 432, 436, 432, 436, 432, 432, 436, 436, 428, 436, 432, 436, 432, 436, 432, 436, 432, 436, 428, 436, 1300, 436, 1300, 432, 432, 436, 432, 436, 1300, 436, 1300, 432, 436, 460 };

struct s_command {
    char command[32];
    unsigned int* signal;
} commands[] = {
    { "shizuka", shizuka },
    { "shizukaHot", shizukaHot },
    { "fullSpeed", fullSpeed },
    { "powerOff", powerOff },
    { (char)NULL, (char)NULL }
};

void callback(char* topic, byte* payload, unsigned int length)
{
    String payload_buff;

    for (int i = 0; i < length; i++) {
        if (payload[i] != '"')
            payload_buff = payload_buff + String((char)payload[i]);
    }
    //Serial.println(payload_buff);

    for (size_t i = 0; commands[i].command != NULL; ++i) {
        if (payload_buff == String(commands[i].command)) {
            Serial.println("Send");
            Serial.println(commands[i].command);
            irsend.sendRaw(commands[i].signal, 643, 38);
        }
    }
}

boolean reconnect()
{
    if (client.connect(clientID)) {
        client.subscribe(channelName);
    }
    return client.connected();
}

void OTASetup()
{
    // Port defaults to 3232
    // ArduinoOTA.setPort(3232);

    // Hostname defaults to esp3232-[MAC]
    ArduinoOTA.setHostname("living-ac");

    // No authentication by default
    // ArduinoOTA.setPassword("admin");

    // Password can be set with it's md5 value as well
    // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
    // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

    ArduinoOTA
        .onStart([]() {
            String type;
            if (ArduinoOTA.getCommand() == U_FLASH)
                type = "sketch";
            else // U_SPIFFS
                type = "filesystem";

            // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
            Serial.println("Start updating " + type);
        })
        .onEnd([]() {
            Serial.println("\nEnd");
        })
        .onProgress([](unsigned int progress, unsigned int total) {
            Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
        })
        .onError([](ota_error_t error) {
            Serial.printf("Error[%u]: ", error);
            if (error == OTA_AUTH_ERROR)
                Serial.println("Auth Failed");
            else if (error == OTA_BEGIN_ERROR)
                Serial.println("Begin Failed");
            else if (error == OTA_CONNECT_ERROR)
                Serial.println("Connect Failed");
            else if (error == OTA_RECEIVE_ERROR)
                Serial.println("Receive Failed");
            else if (error == OTA_END_ERROR)
                Serial.println("End Failed");
        });

    ArduinoOTA.begin();
}

void setup()
{

    Serial.begin(9600);
    Serial.println();

    Serial.println(WiFi.macAddress());

    Serial.printf("Connecting to %s ", ssid);
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    client.setServer(mqttServer, mqttPort);
    client.setCallback(callback);
    lastReconnectAttempt = 0;

    Serial.println(" connected");

    server.on("/poweroff",
        HTTP_GET,
        [](AsyncWebServerRequest* request) {
            irsend.sendRaw(powerOff, 643, 38);
            request->send(200, "text/plain", "Poweroff");
        });

    server.on("/fullspeed",
        HTTP_GET,
        [](AsyncWebServerRequest* request) {
            irsend.sendRaw(fullSpeed, 643, 38);
            request->send(200, "text/plain", "FullSpeed");
        });

    server.on("/shizuka",
        HTTP_GET,
        [](AsyncWebServerRequest* request) {
            irsend.sendRaw(shizuka, 643, 38);
            request->send(200, "text/plain", "Shizuka");
        });

    OTASetup();
    server.begin();
    Serial.printf("Web server started, open %s in a web browser\n",
        WiFi.localIP().toString().c_str());
    delay(1000);
}

void loop()
{
    ArduinoOTA.handle();

    if (!client.connected()) {
        long now = millis();
        if (now - lastReconnectAttempt > 5000) {
            lastReconnectAttempt = now;
            if (reconnect()) {
                lastReconnectAttempt = 0;
            }
        }
    } else { // Connected.
        client.loop();
    }
}
